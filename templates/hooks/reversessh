#! /bin/bash
#
# Copyright 2020 by Karsten Lehmann <mail@kalehmann.de>
#
# This file configures the build process for the remote unlock hookst.
#
#    This file is part of the arch-remote-unlock-hooks.
#
#    The arch-remote-unlock-hooks are free software: you can redistribute them
#    and/or modify them under the terms of the GNU General Public License as
#    published by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    The arch-remote-unlock-hooks are are distributed in the hope that they will
#    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with the arch-remote-unlock-hooks.  If not, see
#    <https://www.gnu.org/licenses/>.

# This hook sets up a reverse SSH tunnel from a remote server to the local
# SSH daemon using dropbear.

# File to save the process id of the reverse tunnel.
PIDFILE=/var/run/reversessh.pid

run_hook() {
        # It seems like $HOME is not always set correctly in the initrd.
        # Made sure it points to the right location, so that dropbear is able
        # to find the known_hosts file inside the the ~/.ssh directory.
        export HOME=/root
        # Call dropbear to establish a reverse SSH proxy.
        # This call utilizes the following options and parameters:
        #  -N  Do not open a shell
        #  -i  The identity file (private key)
        #  -R  Establish a reverse tunnel
        #      RemoteListenAddr:RemotePort:LocalListenAddr:LocalPort
	dbclient \
            -N \
            -i /root/.ssh/$(basename ${SSH_KEY}) \
            -R ${REMOTE_ADDRESS}:127.0.0.1:22 \
            ${REMOTE_USER}@${SERVER} &
	echo $! > "${PIDFILE}"
}

run_cleanuphook() {
	if [ -f "${PIDFILE}" ]; then
		kill $(cat "${PIDFILE}")
	fi
}
