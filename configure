#! /usr/bin/env bash
#
# Copyright 2020 by Karsten Lehmann <mail@kalehmann.de>
#
# This file configures the build process for the remote unlock hookst.
#
#    This file is part of the arch-remote-unlock-hooks.
#
#    The arch-remote-unlock-hooks are free software: you can redistribute them
#    and/or modify them under the terms of the GNU General Public License as
#    published by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    The arch-remote-unlock-hooks are are distributed in the hope that they will
#    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with the arch-remote-unlock-hooks.  If not, see
#    <https://www.gnu.org/licenses/>.


KNOWN_HOSTS_FILE="${KNOWN_HOSTS_FILE:-~/.ssh/known_hosts}"
LAN_INTERFACE="${LAN_INTERFACE:-eth0}"
PREFIX="${PREFIX:-/etc/initcpio}"
REMOTE_ADDRESS="${REMOTE_ADDRESS}"
REMOTE_USER="${REMOT_USER:-root}"
SERVER="${SERVER}"
SSH_KEY="${SSH_KEY:-~/.ssh/id_rsa}"
TEMPLATES=(
    "hooks/reversessh"
    "install/reversessh"
    "install/sshshell"
)

####
# Prints out a detailed help for the configure script.
#
# This function prints a short description of the arch-remote-unlock-hooks
# and a detailed list of all parameters.
#
# Globals:
#  None
# Arguments:
#  None
# Returns:
#  None
###
help() {
    echo "Configure the arch remote unlock hooks."
    echo ""
    echo "The arch remote unlock hooks allow you to unlock the encrypted drive"
    echo "of your arch linux server that is not reachable from the internet via"
    echo "a SSH reverse tunnel from another server."
    echo ""
    echo "The following parameters are available:"
    echo "  -a | --address    ADDRESS   The remote address (including port) of"
    echo "                              the tunnel."
    echo "                              This parameter can be set with the"
    echo "                              environment variable REMOTE_ADDRESS."
    echo "  -h | --help                 show this information."
    echo "  -k | --key        KEY FILE  the ssh key for the remote server. The"
    echo "                              default is ~/.ssh/id_rsa."
    echo "                              This parameter can be set with the"
    echo "                              environment variable SSH_KEY."
    echo "       --known-hosts FILE     the known hosts file including the"
    echo "                              servers public key. The defaul is"
    echo "                              ~/.ssh/known_hosts."
    echo "                              This parameter can be set with the"
    echo "                              environment variable KNOWN_HOSTS_FILE."
    echo "  -l | --lan-if     INTERFACE the network interface of the"
    echo "                              machine. The default is eth0."
    echo "                              This parameter can be set with the"
    echo "                              environment variable LAN_INTERFACE."
    echo "  -p | --prefix     PREFIX    the path to the initcpio configuration"
    echo "                              directory. The default is"
    echo "                              /etc/initcpio."
    echo "                              This parameter can be set with the"
    echo "                              environment variable PREFIX."
    echo "  -s | --server     ADDRESS   the address of the remote server."
    echo "                              This parameter can be set with the"
    echo "                              environment variable SERVER."
    echo "  -u | --user       NAME      the name of the user on the remote"
    echo "                              server."
    echo "                              This parameter can be set with the"
    echo "                              environment variable REMOTE_USER."
    echo "                              server. The default user is root."
    echo ""
    echo "At least the parameters --address and --server are required."
    exit 0
}

####
# Create the Makefile for the arch-remote-unlock-hooks.
#
# The remote unlock hooks are available as templates in this directory. This
# function generates a Makefile, that replaces all variables in these templates
# with the paramters collected by this configure script.
#
# Globals:
#  GATEWAY_IP
#  KNOWN_HOSTS_FILE
#  LAN_INTERFACE
#  PREFIX
#  REMOTE_ADDRESS
#  REMOTE_USER
#  SERVER
#  SSH_KEY
# Arguments:
#  None
# Returns:
#  None
###
install_makefile() {
    cat << EOF > Makefile
define POST_INSTALL_TEXT
       $(tput setaf 2)
       All files were installed.

       You know need to complete two manual steps:

       1) Edit the file \`/etc/mkinitcpio.conf\` and configure mkinitcpio to
        include the arch-remote-unlock-hooks. Find the line
        \`HOOKS=(...)\`
        and add \`reversessh sshshell\` after \`dropbear\`.

       2) Run \`mkinitcpio -p linux\` manually to regenerate your initial
        ramdisk. Note that you possibly need to adapt this command to
        your system!
       $(tput sgr0)
endef

HOOK_FILES = \
 hooks/reversessh

INSTALL_FILES = \
 install/reversessh \
 install/sshshell

build: \$(HOOK_FILES) \$(INSTALL_FILES)

clean:
	rm -rf \$(HOOK_FILES) \$(INSTALL_FILES)

copy_files: build
	cp install/reversessh ${PREFIX}/install/
	cp install/sshshell   ${PREFIX}/install/
	cp hooks/reversessh   ${PREFIX}/hooks/

install: copy_files
	\$(info \$(POST_INSTALL_TEXT))

\$(INSTALL_FILES): install/%: templates/install/%
	mkdir -p install
	KNOWN_HOSTS_FILE="${KNOWN_HOSTS_FILE}" \
 PREFIX="${PREFIX}" \
 REMOTE_ADDRESS="${REMOTE_ADDRESS}" \
 REMOTE_USER="${REMOTE_USER}" \
 SERVER="${SERVER}" \
 SSH_KEY="${SSH_KEY}" \
 envsubst '\$\$KNOWN_HOSTS_FILE:\$\$PREFIX:\$\$SERVER:\$\$SSH_KEY:\$\$REMOTE_ADDRESS:\$\$REMOTE_USER' < \$< > \$@

\$(HOOK_FILES): hooks/%: templates/hooks/%
	mkdir -p hooks
	KNOWN_HOSTS_FILE="${KNOWN_HOSTS_FILE}" \
 PREFIX="${PREFIX}" \
 REMOTE_ADDRESS="${REMOTE_ADDRESS}" \
 REMOTE_USER="${REMOTE_USER}" \
 SERVER="${SERVER}" \
 SSH_KEY="${SSH_KEY}" \
 envsubst '\$\$KNOWN_HOSTS_FILE:\$\$PREFIX:\$\$SERVER:\$\$SSH_KEY:\$\$REMOTE_ADDRESS:\$\$REMOTE_USER' < \$< > \$@

.PHONY: build clean copy_files install
EOF
}

####
# Create the Makefile with the parameters collected by this script.
###
main() {
    install_makefile
}

####
# Prints three lines to give a quick intro into the usage of this script.
#
# This function does not return and always exits with a failure.
#
# Globals:
#  None
# Arguments:
#  The name of this script.
# Returns
#  None
###
usage() {
    echo "Usage:"
    echo "${0} [...OPTION]"
    echo "Call ${0} --help for a list of available options."
    exit 1
}

####
# This function verifies, that all required parameters were set.
#
# The parameters --address and --server can under no circumstances be guessed
# by this script. Therefore these two parameters are required to be set by the
# user.
#
# If these two parameters were not set, the function prints a short error
# message and then exits with a failure.
#
# Globals:
#  REMOTE_ADDRESS
#  SERVER
# Arguments:
#  The name of this script.
# Returns:
#  None
###
validate() {
    # Validate that all variables with no defaults are set.
    declare -a UNSET_PARAMETERS
    
    if [[ -z "${REMOTE_ADDRESS}" ]]; then
        UNSET_PARAMETERS+=("--address")
    fi

    if [[ -z "${SERVER}" ]]; then
        UNSET_PARAMETERS+=("--server")
    fi
    
    if [[ ${#UNSET_PARAMETERS[@]} -eq 0 ]]; then
        return
    fi

    echo "The following parameters are required: ${UNSET_PARAMETERS[*]}"
    echo "Call ${0} --help for more information"
    exit 1
}

# Parse the parameters.
while [[ ${#} -gt 0 ]]
do
    option="${1}"
    case ${option} in
        -a|--address)
            REMOTE_ADDRESS="${2}"
            shift
            shift
            ;;
        -h|--help)
            help
            ;;
        -i|--ip)
            IP="${2}"
            shift
            shift
            ;;
        -k|--key)
            SSH_KEY="${2}"
            shift
            shift
            ;;
        --known-hosts)
            KNOWN_HOSTS_FILE="${2}"
            shift
            shift
            ;;
        -l|--lan-if)
            LAN_INTERFACE="${2}"
            shift
            shift
            ;;
        -p|--prefix)
            PREFIX="${2}"
            shift
            shift
            ;;
        -s|--server)
            SERVER="${2}"
            shift
            shift
            ;;
        -u|--user)
            REMOTE_USER="${2}"
            shift
            shift
            ;;
        *)
            echo "Unknown option ${option}"
            usage "${0}"
            ;;
    esac
done

validate "${0}"
main
